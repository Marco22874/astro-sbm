---
// Import necessari (inclusa paginate e tipi)
import { getCollection, getEntry, type CollectionEntry } from 'astro:content';
import { Image } from 'astro:assets';
import Layout from '../../../layouts/Layout.astro'; // VERIFICA PERCORSO LAYOUT!
import type { GetStaticPathsOptions, Page } from 'astro';
// import languages
import { useTranslations } from "../../../i18n/utils.ts";
const tr = useTranslations("it");
// Interfaccia per le news processate
interface ProcessedNews {
  id: string;
  slug: string;
  data: CollectionEntry<'news'>['data'];
  excerpt: string | null | undefined;
}

// --- Generazione Pagine Statiche ---
export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
  const currentLang = 'it';
  const PAGE_SIZE = 2; 

  // 1. Recupera TUTTE le entry delle news italiane (non processate)
  const allNews = await getCollection('news');
  const italianNewsEntries = allNews
    .filter(entry => entry.id.startsWith(currentLang + '/'))
    .sort((a, b) => b.data.pubDate.valueOf() - b.data.pubDate.valueOf()); // Ordina per data (più recenti prima)

  console.log(`[getStaticPaths it/news] Trovate ${italianNewsEntries.length} news italiane. Paginazione con ${PAGE_SIZE} per pagina.`);

  // 2. Usa paginate per creare le rotte /it/news/1, /it/news/2, ecc.
  return paginate(italianNewsEntries, {
    pageSize: PAGE_SIZE,
    // Puoi passare props aggiuntive qui se necessario, ad esempio:
    // props: { additionalData: 'valore' }
  });
}

// --- Logica del Componente per Singola Pagina ---
const { page } = Astro.props as { page: Page<CollectionEntry<'news'>> }; 
const PAGE_SIZE = 2; // Numero di news per pagina

const currentLang = 'it';
let processedPageData: ProcessedNews[] = []; // Conterrà le news processate SOLO per questa pagina
let fetchError: Error | null = null;
let categoryMap = new Map<string, string>();

try {
  // Carica le categorie (necessario per visualizzare i titoli delle categorie)
  console.log(`[it/news/${page.currentPage}] Tentativo caricamento categorie per: ${currentLang}`);
  const categoryDataEntry = await getEntry('categories', currentLang);
  if (categoryDataEntry && Array.isArray(categoryDataEntry.data)) {
    categoryDataEntry.data.forEach(category => {
      if(category && category.slug && category.title) {
          categoryMap.set(category.slug, category.title);
      }
    });
    console.log(`[it/news/${page.currentPage}] Mappa categorie caricata per '${currentLang}' con ${categoryMap.size} voci.`);
  } else {
      console.warn(`[it/news/${page.currentPage}] File categorie per '${currentLang}' non trovato o non è un array.`);
  }

  // Processa (chiama render()) SOLO le news della pagina CORRENTE (page.data)
  if (page.data.length > 0) {
    processedPageData = await Promise.all(
      page.data.map(async (newsEntry) => {
        const rendered = await newsEntry.render(); // Ottieni excerpt ecc.
        return {
          id: newsEntry.id,
          slug: newsEntry.slug,
          data: newsEntry.data,
          excerpt: rendered.remarkPluginFrontmatter?.excerpt,
        };
      })
    );
    console.log(`[it/news/${page.currentPage}] Processate ${processedPageData.length} news per la pagina ${page.currentPage}.`);
  }

} catch (error) {
  console.error(`--- ERRORE DETTAGLIATO IN it/news/${page.currentPage}.astro ---`);
  console.error(error);
  console.error("--- FINE ERRORE DETTAGLIATO ---");
  fetchError = error instanceof Error ? error : new Error(String(error));
  processedPageData = []; // Assicura array vuoto in caso di errore
}

// Determina se mostrare il messaggio "Nessuna news"
const showNoNewsMessage = !fetchError && processedPageData.length === 0;

---
<Layout title={`News - Pagina ${page.currentPage}`}>
  <div class="sbm-section w-screen flex flex-col mt-[160px] text-midnight">

    {/* Titolo Pagina (Opzionale) */}
    <h1 class="text-3xl md:text-4xl font-bold text-center mb-8 md:mb-12">
      News<span class="text-gray-500 text-2xl"></span>
    </h1>

    {/* Gestione Errore */}
    {fetchError && (
      <div class="w-full text-center py-10 px-4 text-red-600 border border-red-300 bg-red-50 rounded-md mx-auto max-w-3xl">
        <p class="font-semibold">Si è verificato un errore!</p>
        <p>Impossibile caricare le news per questa pagina. Controlla la console del server per dettagli tecnici.</p>
        {/* Potresti mostrare error.message ma fai attenzione a non esporre info sensibili */}
        {/* <p class="text-sm mt-2 font-mono">{fetchError.message}</p> */}
      </div>
    )}

    {/* Lista News Verticale (se non ci sono errori e ci sono news) */}
    {!fetchError && processedPageData.length > 0 && (
      <div class="w-full mt-[15px] border-x-[32px] border-b-[32px] md:border-x-[48px] md:border-b-[48px] xl:border-x-[188px] xl:border-b-[188px] border-white bg-transparent">
        <section id="vertical-news-list" class="bg-white text-midnight w-full flex flex-col gap-y-8 md:gap-y-12 p-4 md:p-8">
          {processedPageData.map((news) => (
            <article class="news h-auto w-full flex flex-col md:flex-row md:items-start md:gap-8 items-center border-b border-gray-200 pb-8 md:pb-12 last:border-b-0 last:pb-0">
              {/* Colonna Testo */}
              <div class="md:flex-1 w-full md:w-auto order-2 md:order-1"> {/* Testo prima su mobile */}
                  <h2 class="text-2xl font-medium min-h-16 my-2 2xl:mt-10 md:text-3xl md:mb-5">
                    <a href={`/news/${news.slug ?? 'error-slug'}`} class="hover:text-sbm-purple transition-colors">{news.data.title}</a>
                  </h2>
                  {/* Mappa Categorie */}
                  {news.data.categories && news.data.categories.length > 0 && (
                    <div class="flex flex-wrap gap-2 mb-5">
                      {news.data.categories.map((categoryRef: { id: string; collection: string }) => {
                        const categoryTitle = categoryMap.get(categoryRef.id);
                        return categoryTitle ? (
                          <div class="text-sbm-purple text-sm px-3 w-auto h-[30px] bg-sbm-purple/10 border border-sbm-purple rounded-3xl inline-flex items-center justify-center">
                            {categoryTitle}
                          </div>
                        ) : null;
                      })}
                    </div>
                  )}
                  {/* Data Pubblicazione */}
                  <p class="text-sm text-gray-600 mb-3">
                    Pubblicato il: {news.data.pubDate.toLocaleDateString('it-IT', { year: 'numeric', month: 'long', day: 'numeric' })}
                  </p>
                  {/* Descrizione */}
                  <p class="min-h-32 md:text-lg xl:text-xl xl:leading-relaxed mt-4 mb-5 italic text-gray-600"> {/* Leggermente ridotto font per descrizione */}
                    {news.data.description}
                     {/* Puoi aggiungere un link "Leggi tutto" se la descrizione è troncata */}
                     {/* <a href={`/news/${news.slug ?? 'error-slug'}`} class="text-sbm-purple hover:underline ml-2">Leggi tutto</a> */}
                  </p>
              </div>
              {/* Colonna Immagine */}
              <div class="w-full md:flex-1 flex flex-col overflow-hidden items-center mt-4 md:mt-0 order-1 md:order-2"> {/* Immagine prima su mobile */}
                <a href={`/news/${news.slug ?? 'error-slug'}`} class="w-full block group"> {/* Aggiunto group per effetti hover sull'immagine */}
                  <Image
                    src={news.data.image}
                    alt={news.data.imageAlt ?? `Immagine per ${news.data.title}`}
                    width={600}
                    height={400} 
                    format="webp"
                    quality={"mid"}
                    class="object-cover w-full h-full max-h-[400px] border-1 border-midnight/30 p-[2px] rounded-3xl inline-block group-hover:opacity-80 transition-opacity" 
                    loading="lazy"
                  />
                </a>
              </div>
            </article>
          ))} {/* Fine map */}
        </section>
      </div>
    )}

    {/* Messaggio "Nessuna news" (se non ci sono errori E non ci sono news) */}
    {showNoNewsMessage && (
      <div class="w-full text-center py-10 px-4">
        <p>Al momento non ci sono news da visualizzare in questa pagina ({currentLang}).</p>
      </div>
    )}

    {/* --- Controlli di Paginazione --- */}
    {/* Mostra solo se ci sono più pagine */}
    {page.lastPage > 1 && (
      <nav aria-label="Paginazione news" class="flex justify-center items-center flex-wrap gap-4 mt-12 mb-8 px-4">
        {/* Link Pagina Precedente */}
        {page.url.prev ? (
          <a href={page.url.prev} class="px-4 py-2 border border-gray-300 rounded-md bg-white text-gray-700 hover:bg-gray-100 transition-colors text-sm font-medium">
            &laquo; {tr("paginate.prev")}
          </a>
        ) : (
          <span class="px-4 py-2 border border-gray-200 rounded-md text-gray-400 cursor-not-allowed text-sm font-medium">&laquo; Precedente</span>
        )}

        {/* Numeri di Pagina (Esempio semplice) */}
        {/* Puoi creare logica più complessa per mostrare solo alcuni numeri "... 1 2 3 ... 10" */}
        <div class="flex items-center gap-2">
          {Array.from({ length: Math.ceil(page.data.length / 2) }, (_, i) => i + 1).map((num) => (
            <a
              href={`/it/news/${num}/`}
              class={`px-3 py-1 border rounded-md text-sm font-medium ${num === page.currentPage ? 'bg-sbm-purple text-white border-sbm-purple pointer-events-none' : 'border-gray-300 bg-white text-gray-600 hover:bg-gray-100'}`}
              aria-current={num === page.currentPage ? 'page' : undefined}
            >
              {num}
            </a>
          ))}
        </div>


        {/* Link Pagina Successiva */}
        {page.url.next ? (
          <a href={page.url.next} class="px-4 py-2 border border-gray-300 rounded-md bg-white text-gray-700 hover:bg-gray-100 transition-colors text-sm font-medium">
            {tr("paginate.next")} &raquo;
          </a>
        ) : (
          <span class="px-4 py-2 border border-gray-200 rounded-md text-gray-400 cursor-not-allowed text-sm font-medium">{tr("paginate.next")} &raquo;</span>
        )}
      </nav>
    )}
    {/* --- Fine Controlli di Paginazione --- */}

  </div>
</Layout>