---
// Importa solo 'languages'
import { languages } from "../../i18n/ui";

// Definisci la lingua di default qui
const defaultLang = 'it'; // O 'en' se la tua lingua principale è l'inglese

const pathname = Astro.url.pathname;

// Variabili per lingua corrente e percorso "base"
let currentLang = defaultLang; // Inizializza con la default definita sopra
let basePath = pathname;
let isNewsDetail = false;

const segments = pathname.split('/').filter(s => s);

// Caso 1: Pagina News Dettaglio (es. /news/it/slug)
if (segments.length >= 3 && segments[0] === 'news' && segments[1] in languages) {
  currentLang = segments[1];
  basePath = '/' + segments.slice(2).join('/');
  isNewsDetail = true;
}
// Caso 2: Pagina normale localizzata (es. /it/about)
else if (segments.length >= 1 && segments[0] in languages) {
  currentLang = segments[0];
  basePath = '/' + segments.slice(1).join('/');
  if (basePath === '/') basePath = ''; // Gestisci root localizzata
}
// Caso 3: Pagina non localizzata (usa lingua default)
else {
  currentLang = defaultLang;
  basePath = pathname; // Usa il percorso completo se non localizzato
}

// Costruisci i link alternativi
const alternateLinks: Record<string, string> = {};
Object.keys(languages).forEach(lang => {
  if (lang !== currentLang) {
    if (isNewsDetail) {
      // Link news: /news/ + altraLingua + slugBase (senza slash iniziale)
      alternateLinks[lang] = `/news/${lang}${basePath}`;
    } else {
      // Link pagina normale: / + altraLingua + percorsoBase
      // Gestisci caso root (se basePath era '' e lang è default, punta a '/')
      if (!basePath && lang === defaultLang) { // Usa la defaultLang definita sopra
          alternateLinks[lang] = '/';
      } else if (!basePath && lang !== defaultLang) {
           alternateLinks[lang] = `/${lang}/`;
      } else {
           alternateLinks[lang] = `/${lang}${basePath}`;
      }
    }
  }
});
---

<ul
  role="list"
  aria-label="Selettore lingua"
  class="flex gap-4 w-[60px] 2xl:w-[40px] items-center justify-center xl:justify-start"
>
  {
    Object.entries(languages).map(([lang, label]) => {
      if (lang !== currentLang) {
        const targetUrl = alternateLinks[lang]
        return (
          <li class="toggle-list-item list-none px-2" role="listitem">
            <a
              href={targetUrl}
              role="button"
              aria-label={`Cambia lingua in ${label}`}
              tabindex="0"
              class="w-[28px] h-[28px] bg-midnight/10 border border-midnight text-midnight text-sm flex items-center justify-center cursor-pointer rounded-full focus:outline-none focus:ring-2 focus:ring-sbm-purple focus:ring-offset-2"
            >
              {label}
            </a>
          </li>
        );
      }
    })
  }
</ul>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const listItems = document.querySelectorAll(".toggle-list-item");
    const languageLinks = document.querySelectorAll(".toggle-list-item a");

    // Funzione per gestire il toggle della visibilità
    function toggleVisibility(targetItem) {
      listItems.forEach((el) => {
        if (el !== targetItem) {
          el.classList.remove("block");
          el.classList.add("hidden");
        } else {
          el.classList.remove("hidden");
          el.classList.add("block");
        }
      });
    }

    // Event listener per mouse click
    listItems.forEach((item) => {
      item.addEventListener("click", () => {
        toggleVisibility(item);
      });
    });

    // Event listener per keyboard support sui link lingua
    languageLinks.forEach((link) => {
      link.addEventListener("keydown", (e) => {
        if (e.key === "Enter" || e.key === " ") {
          e.preventDefault();
          // Trigger navigation (link default behavior)
          link.click();
        }
        if (e.key === "Escape") {
          // Close language picker if open
          const parentItem = link.closest(".toggle-list-item");
          if (parentItem && !parentItem.classList.contains("hidden")) {
            toggleVisibility(parentItem);
          }
        }
      });
    });
  });
</script>
